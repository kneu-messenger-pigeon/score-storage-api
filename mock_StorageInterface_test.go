// Code generated by mockery v2.20.0. DO NOT EDIT.

package main

import (
	scoreApi "github.com/kneu-messenger-pigeon/score-api"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageInterface is an autogenerated mock type for the StorageInterface type
type MockStorageInterface struct {
	mock.Mock
}

// getDisciplineScore provides a mock function with given fields: studentId, disciplineId, lessonId
func (_m *MockStorageInterface) getDisciplineScore(studentId int, disciplineId int, lessonId int) (scoreApi.DisciplineScore, error) {
	ret := _m.Called(studentId, disciplineId, lessonId)

	var r0 scoreApi.DisciplineScore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) (scoreApi.DisciplineScore, error)); ok {
		return rf(studentId, disciplineId, lessonId)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) scoreApi.DisciplineScore); ok {
		r0 = rf(studentId, disciplineId, lessonId)
	} else {
		r0 = ret.Get(0).(scoreApi.DisciplineScore)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(studentId, disciplineId, lessonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getDisciplineScoreResultByStudentId provides a mock function with given fields: studentId, disciplineId
func (_m *MockStorageInterface) getDisciplineScoreResultByStudentId(studentId int, disciplineId int) (scoreApi.DisciplineScoreResult, error) {
	ret := _m.Called(studentId, disciplineId)

	var r0 scoreApi.DisciplineScoreResult
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (scoreApi.DisciplineScoreResult, error)); ok {
		return rf(studentId, disciplineId)
	}
	if rf, ok := ret.Get(0).(func(int, int) scoreApi.DisciplineScoreResult); ok {
		r0 = rf(studentId, disciplineId)
	} else {
		r0 = ret.Get(0).(scoreApi.DisciplineScoreResult)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(studentId, disciplineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getDisciplineScoreResultsByStudentId provides a mock function with given fields: studentId
func (_m *MockStorageInterface) getDisciplineScoreResultsByStudentId(studentId int) (scoreApi.DisciplineScoreResults, error) {
	ret := _m.Called(studentId)

	var r0 scoreApi.DisciplineScoreResults
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (scoreApi.DisciplineScoreResults, error)); ok {
		return rf(studentId)
	}
	if rf, ok := ret.Get(0).(func(int) scoreApi.DisciplineScoreResults); ok {
		r0 = rf(studentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scoreApi.DisciplineScoreResults)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(studentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStorageInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStorageInterface creates a new instance of MockStorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStorageInterface(t mockConstructorTestingTNewMockStorageInterface) *MockStorageInterface {
	mock := &MockStorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
